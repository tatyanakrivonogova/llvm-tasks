; RUN: opt < %s --passes="custom-opts-brackets-mul-transform,instcombine" -S | FileCheck %s

define dso_local noundef i32 @_Z5test1iii(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #0 {
  %4 = add i32 %1, %0
  %5 = add i32 %4, %2
  %6 = mul i32 %5, %0
  %7 = mul nsw i32 %2, %1
  %8 = add nsw i32 %6, %7
  ret i32 %8

; CHECK-LABEL: @_Z5test1iii(
; CHECK-NEXT: %x.plus.a = add i32 %0, %1
; CHECK-NEXT: %x.plus.b = add i32 %0, %2
; CHECK-NEXT: %mul = mul i32 %x.plus.a, %x.plus.b
; CHECK-NEXT: ret i32 %mul
}


define dso_local noundef i32 @_Z5test2iii(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #0 {
  %4 = add i32 %1, %0
  %5 = add i32 %4, %2
  %6 = mul i32 %5, %0
  %7 = mul nsw i32 %2, %1
  %8 = add nsw i32 %6, %7
  ret i32 %8

; CHECK-LABEL: @_Z5test2iii(
; CHECK-NEXT: %x.plus.a = add i32 %0, %1
; CHECK-NEXT: %x.plus.b = add i32 %0, %2
; CHECK-NEXT: %mul = mul i32 %x.plus.a, %x.plus.b
; CHECK-NEXT: ret i32 %mul
}


define dso_local noundef i32 @_Z5test4iii(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #0 {
  %4 = add nsw i32 %1, %0
  %5 = add nsw i32 %4, %2
  %6 = mul nsw i32 %5, %0
  %7 = mul nsw i32 %2, %1
  %8 = add nsw i32 %6, %7
  ret i32 %8

; CHECK-LABEL: @_Z5test4iii(
; CHECK-NEXT: %x.plus.a = add i32 %0, %1
; CHECK-NEXT: %x.plus.b = add i32 %0, %2
; CHECK-NEXT: %mul = mul i32 %x.plus.a, %x.plus.b
; CHECK-NEXT: ret i32 %mul
}


define dso_local noundef i32 @_Z5test5iii(i32 noundef %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #0 {
  %4 = mul nsw i32 %2, %1
  %5 = add i32 %1, %0
  %6 = add i32 %5, %2
  %7 = mul i32 %6, %0
  %8 = add i32 %7, %4
  ret i32 %8

; CHECK-LABEL: @_Z5test5iii(
; CHECK-NEXT: %x.plus.a = add i32 %0, %1
; CHECK-NEXT: %x.plus.b = add i32 %0, %2
; CHECK-NEXT: %mul = mul i32 %x.plus.a, %x.plus.b
; CHECK-NEXT: ret i32 %mul
}
  
  
define dso_local noundef i32 @_Z5test6iiii(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #0 {
  %5 = add nsw i32 %2, %1
  %6 = mul nsw i32 %5, %3
  %7 = add i32 %3, %0
  %8 = add i32 %7, %5
  %9 = mul i32 %8, %0
  %10 = add i32 %9, %6
  ret i32 %10

; CHECK-LABEL: @_Z5test6iiii(
; CHECK-NEXT: %5 = add nsw i32 %2, %1
; CHECK-NEXT: %x.plus.a = add i32 %0, %3
; CHECK-NEXT: %x.plus.b = add i32 %5, %0
; CHECK-NEXT: %mul = mul i32 %x.plus.a, %x.plus.b
; CHECK-NEXT: ret i32 %mul
}


define dso_local noundef i32 @_Z5test7iiii(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #0 {
  %5 = add nsw i32 %3, %2
  %6 = mul nsw i32 %5, %1
  %7 = add i32 %1, %0
  %8 = add i32 %7, %5
  %9 = mul i32 %8, %0
  %10 = add i32 %9, %6
  ret i32 %10

; CHECK-LABEL: @_Z5test7iiii(
; CHECK-NEXT: %5 = add nsw i32 %3, %2
; CHECK-NEXT: %x.plus.a = add i32 %0, %1
; CHECK-NEXT: %x.plus.b = add i32 %5, %0
; CHECK-NEXT: %mul = mul i32 %x.plus.a, %x.plus.b
; CHECK-NEXT: ret i32 %mul
}


define dso_local noundef i32 @_Z5test8iiii(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #0 {
  %5 = add nsw i32 %1, %0
  %6 = mul nsw i32 %3, %2
  %7 = add i32 %5, %2
  %8 = add i32 %7, %3
  %9 = mul i32 %8, %5
  %10 = add i32 %9, %6
  ret i32 %10

; CHECK-LABEL: @_Z5test8iiii(
; CHECK-NEXT: %5 = add nsw i32 %1, %0
; CHECK-NEXT: %x.plus.a = add i32 %5, %2
; CHECK-NEXT: %x.plus.b = add i32 %5, %3
; CHECK-NEXT: %mul = mul i32 %x.plus.a, %x.plus.b
; CHECK-NEXT: ret i32 %mul
}


define dso_local noundef i32 @_Z5test9iiiiiii(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32 noundef %6) local_unnamed_addr #0 {
  %8 = add nsw i32 %1, %0
  %9 = add nsw i32 %3, %2
  %10 = add nsw i32 %5, %4
  %11 = add nsw i32 %10, %6
  %12 = mul nsw i32 %11, %9
  %13 = add i32 %9, %8
  %14 = add i32 %13, %11
  %15 = mul i32 %14, %8
  %16 = add i32 %15, %12
  ret i32 %16

; CHECK-LABEL: @_Z5test9iiiiiii(
; CHECK-NEXT: %8 = add nsw i32 %1, %0
; CHECK-NEXT: %9 = add nsw i32 %3, %2
; CHECK-NEXT: %10 = add nsw i32 %5, %4
; CHECK-NEXT: %11 = add nsw i32 %10, %6
; CHECK-NEXT: %x.plus.a = add i32 %8, %9
; CHECK-NEXT: %x.plus.b = add i32 %8, %11
; CHECK-NEXT: %mul = mul i32 %x.plus.a, %x.plus.b
; CHECK-NEXT: ret i32 %mul
}